// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// VerifyResultValue - Use 'VerifyResultValueExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyResultValue()
        {
            #region Variable Declarations
            WpfEdit uITextBox3Edit = this.UIMainWindowWindow.UITextBox3Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox3' text box equals '3'
            Assert.AreEqual(this.VerifyResultValueExpectedValues.UITextBox3EditText, uITextBox3Edit.Text, "Is not Equal (Error1)");
        }
        
        /// <summary>
        /// PressClearButton
        /// </summary>
        public void PressClearButton()
        {
            #region Variable Declarations
            WpfButton uIClearButton = this.UIMainWindowWindow.UIClearButton;
            #endregion

            // Click 'Clear' button
            Mouse.Click(uIClearButton, new Point(44, 9));
        }
        
        /// <summary>
        /// VerifyCleared - Use 'VerifyClearedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyCleared()
        {
            #region Variable Declarations
            WpfEdit uITextBox1Edit = this.UIMainWindowWindow.UITextBox1Edit;
            WpfEdit uITextBox2Edit = this.UIMainWindowWindow.UITextBox2Edit;
            WpfEdit uITextBox3Edit = this.UIMainWindowWindow.UITextBox3Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox1' text box equals ''
            Assert.AreEqual(this.VerifyClearedExpectedValues.UITextBox1EditText, uITextBox1Edit.Text);

            // Verify that the 'Text' property of 'textBox2' text box equals ''
            Assert.AreEqual(this.VerifyClearedExpectedValues.UITextBox2EditText, uITextBox2Edit.Text);

            // Verify that the 'Text' property of 'textBox3' text box equals ''
            Assert.AreEqual(this.VerifyClearedExpectedValues.UITextBox3EditText, uITextBox3Edit.Text);
        }
        
        #region Properties
        public virtual VerifyResultValueExpectedValues VerifyResultValueExpectedValues
        {
            get
            {
                if ((this.mVerifyResultValueExpectedValues == null))
                {
                    this.mVerifyResultValueExpectedValues = new VerifyResultValueExpectedValues();
                }
                return this.mVerifyResultValueExpectedValues;
            }
        }
        
        public virtual VerifyClearedExpectedValues VerifyClearedExpectedValues
        {
            get
            {
                if ((this.mVerifyClearedExpectedValues == null))
                {
                    this.mVerifyClearedExpectedValues = new VerifyClearedExpectedValues();
                }
                return this.mVerifyClearedExpectedValues;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIMainWindowWindow1 UIMainWindowWindow1
        {
            get
            {
                if ((this.mUIMainWindowWindow1 == null))
                {
                    this.mUIMainWindowWindow1 = new UIMainWindowWindow1();
                }
                return this.mUIMainWindowWindow1;
            }
        }
        #endregion
        
        #region Fields
        private VerifyResultValueExpectedValues mVerifyResultValueExpectedValues;
        
        private VerifyClearedExpectedValues mVerifyClearedExpectedValues;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UIMainWindowWindow1 mUIMainWindowWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyResultValue'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VerifyResultValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox3' text box equals '3'
        /// </summary>
        public string UITextBox3EditText = "3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyCleared'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VerifyClearedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox1' text box equals ''
        /// </summary>
        public string UITextBox1EditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox2' text box equals ''
        /// </summary>
        public string UITextBox2EditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox3' text box equals ''
        /// </summary>
        public string UITextBox3EditText = "";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UIStartButton
        {
            get
            {
                if ((this.mUIStartButton == null))
                {
                    this.mUIStartButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIStartButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button1";
                    this.mUIStartButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIStartButton;
            }
        }
        
        public WpfCheckBox UICheckBoxCheckBox
        {
            get
            {
                if ((this.mUICheckBoxCheckBox == null))
                {
                    this.mUICheckBoxCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUICheckBoxCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "checkBox1";
                    this.mUICheckBoxCheckBox.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUICheckBoxCheckBox;
            }
        }
        
        public WpfButton UIStartButton1
        {
            get
            {
                if ((this.mUIStartButton1 == null))
                {
                    this.mUIStartButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIStartButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "buttonA";
                    this.mUIStartButton1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIStartButton1;
            }
        }
        
        public WpfEdit UITextBox3Edit
        {
            get
            {
                if ((this.mUITextBox3Edit == null))
                {
                    this.mUITextBox3Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBox3Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBox3";
                    this.mUITextBox3Edit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITextBox3Edit;
            }
        }
        
        public WpfEdit UITextBox1Edit
        {
            get
            {
                if ((this.mUITextBox1Edit == null))
                {
                    this.mUITextBox1Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBox1Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBox1";
                    this.mUITextBox1Edit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITextBox1Edit;
            }
        }
        
        public WpfEdit UITextBox2Edit
        {
            get
            {
                if ((this.mUITextBox2Edit == null))
                {
                    this.mUITextBox2Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBox2Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBox2";
                    this.mUITextBox2Edit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITextBox2Edit;
            }
        }
        
        public WpfButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "buttonAdd";
                    this.mUIAddButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        
        public WpfButton UIClearButton
        {
            get
            {
                if ((this.mUIClearButton == null))
                {
                    this.mUIClearButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIClearButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "buttonClear";
                    this.mUIClearButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIClearButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIStartButton;
        
        private WpfCheckBox mUICheckBoxCheckBox;
        
        private WpfButton mUIStartButton1;
        
        private WpfEdit mUITextBox3Edit;
        
        private WpfEdit mUITextBox1Edit;
        
        private WpfEdit mUITextBox2Edit;
        
        private WpfButton mUIAddButton;
        
        private WpfButton mUIClearButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMainWindowWindow1 : WinWindow
    {
        
        public UIMainWindowWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WinButton UISluitenButton
        {
            get
            {
                if ((this.mUISluitenButton == null))
                {
                    this.mUISluitenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISluitenButton.SearchProperties[WinButton.PropertyNames.Name] = "Sluiten";
                    this.mUISluitenButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUISluitenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISluitenButton;
        #endregion
    }
}
